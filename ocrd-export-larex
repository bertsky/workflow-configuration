#!/usr/bin/env bash

declare -A LOGLEVELS
LOGLEVELS=([CRITICAL]=1 [OFF]=1 [ERROR]=2 [WARNING]=3 [WARN]=3 [INFO]=4 [DEBUG]=5 [TRACE]=5)
function log {
    provided=${LOGLEVELS[$LEVEL]:-0}
    current=${LOGLEVELS[$loglevel]:-0}
    test $provided -le $current || return 0
    echo >&2 "$(date +%T.%3N) $LEVEL $0 - $1"
}
function critical { LEVEL=CRITICAL log "$1"; }
function error { LEVEL=ERROR log "$1"; }
function warning { LEVEL=WARNING log "$1"; }
function info { LEVEL=INFO log "$1"; }
function debug { LEVEL=DEBUG log "$1"; }

((BASH_VERSINFO<4 || BASH_VERSINFO==4 && BASH_VERSINFO[1]<4)) && critical "bash $BASH_VERSION is too old. Please install 4.4 or newer" && exit 2

page_filegrp=
image_filegrp=
pages=
out_dir=
symlink=0
loglevel=INFO
declare -A typemap
# LAREX always needs some @type
typemap=(['not(@type)']=other)
while (($#)); do
    case "${1:--h}" in
        -h|-[-]help)
            cat <<EOF
Usage: $(basename $0) [OPTIONS] [DIRECTORY]

with options:
 -I|--input-file-grp DIR[,DIR] File group(s) used as input
 -O|--output-directory DIR     Directory used as output
 -g|--page-id ID               Physical page ID(s) to limit to
 -l|--log-level [OFF|ERROR|WARN|INFO|DEBUG|TRACE] Log level
 -s|--symlink                  Try to symlink images instead of copying
 -t|--map-type XPATH EXPR      Additional TextRegion @type mapping to apply
                               (default: ($(for key in ${!typemap[*]}; do echo "['$key']='${typemap[$key]}'"; done)))

Create a flat directory suitable for LAREX from an OCR-D workspace DIRECTORY
(or $PWD), exporting...
* all PAGE-XML files from the first (or only) input-file-grp, if given,
  (or the very last fileGrp which can be found in the workspace)
* all image files from the second input-file-grp, if given,
  (or the @imageFilename referenced in the PAGE-XML)
...and placing them into the output-directory, if given
  (or the subdirectory "larex").
To facilitate current limitations of LAREX, name all files with the same
stem (derived from the page number), and add a "@type=other" to all
TextRegion instances without a "@type".
(For PAGE-XML files, make copies, for image files, make symlinks if possible.)
EOF
            exit
            ;;
        -I|--input-file-grp)
            shift
            page_filegrp="${1%%,*}"
            image_filegrp="${1##*,}"
            if test "x$page_filegrp" = "x$image_filegrp"; then
                image_filegrp=
            fi
            shift
            ;;
        -O|--output-directory)
            shift
            out_dir="$1"
            shift
            ;;
        -g|--page-id)
            shift
            pages="$1"
            shift
            ;;
        -l|--log-level)
            shift
            loglevel=$1
            shift
            ;;
        -s|--symlink)
            symlink=1
            shift
            ;;
        -t|--map-type)
            shift
            xpath="$1"
            shift
            expr="$1"
            typemap["$xpath"]="$expr"
            shift
            ;;
        -p|--parameter)
            shift
            shift
            ;;
        --overwrite)
            shift
            ;;
        *)
            break
            ;;
    esac
done

(($#>1)) && warning "non-first argument(s) will be ignored: '${@:2}'"

set -e
declare -A MIMETYPES
eval MIMETYPES=( $(ocrd bashlib constants MIME_TO_EXT) )
MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)
DIRECTORY="${1:-.}"
test -d "$DIRECTORY"

# avoid damaging/replacing existing workspaces:
if test -f "$DIRECTORY"/mets.xml; then
   cd "$DIRECTORY"
elif test -d "$DIRECTORY"/data -a -f "$DIRECTORY"/data/mets.xml; then
    cd "$DIRECTORY"/data
else
    error "Directory '$DIRECTORY' is not a workspace"
    exit 1
fi

# sub-shell to back-off from out_dir in case of failure:
(
    if test -z "$out_dir"; then
        out_dir=larex
        debug "using --output-directory '$PWD/larex'"
    else
        out_dir=$(realpath --relative-to="$OLDPWD" "$out_dir")
    fi
    mkdir -p "$out_dir"
    if test -z "$page_filegrp"; then
        page_filegrp=$(ocrd workspace list-group | tail -1)
        debug "using --input-file-grp '$page_filegrp'"
    fi
    files=( $(ocrd workspace find -G "$page_filegrp" ${pages:+-g} $pages -m $MIMETYPE_PAGE -k local_filename -k pageId) )
    for ((i=0; i+1<${#files[*]}; i+=2)); do
        file=${files[i]}
        page=${files[i+1]}
        cp -f $file "$out_dir"/$page.xml
        file="$out_dir"/$page.xml
        info "copied PAGE-XML for page '$page'"
        # to become independent of whether and what
        # namespace prefix is used for PAGE-XML,
        # we first have to know the namespace:
        namespace=$(xmlstarlet sel -t -m '/*[1]' -v 'namespace-uri()' "$file")
        # now (using --no-doc-namespace) we can
        # safely query with -N pc=${namespace}
        # and safely add with prefix ${ns_prefix}:
        ns_prefix=$(xmlstarlet sel -t -m '/*[1]' -v 'substring-before(name(),"PcGts")' "$file"; true)
        if test -z "$image_filegrp"; then
            image=$(xmlstarlet --no-doc-namespace sel \
                       -N "pc=${namespace}" -t -v '/pc:PcGts/pc:Page/@imageFilename' \
                       "$file")
            debug "found image '$image' for page '$page'"
            suff=${image##*.}
            target="${file%.xml}".${suff:-png}
            ((symlink)) && ln -fs "$PWD/$image" "$target" || cp -fu "$image" "$target"
            info "copied .$suff image for page '$page'"
        fi
        if ((${#typemap[*]})); then
            for xpath in ${!typemap[*]}; do
                xmlstarlet --no-doc-namespace ed --inplace -N "pc=${namespace}" \
                   -s "//${ns_prefix}TextRegion[not(@type)]" -t attr -n type -v other \
                   -u "//${ns_prefix}TextRegion[$xpath]/@type" -v "${typemap[$xpath]}" \
                   "$file"
            done
        fi
        xmlstarlet --no-doc-namespace ed --inplace -N "pc=${namespace}" \
                   -u "/pc:PcGts/pc:Page/@imageFilename" \
                   -v "$page.png" "$file"
    done
    if test -n "$image_filegrp"; then
        ocrd workspace find -G "$image_filegrp" ${pages:+-g} $pages -k local_filename -k pageId -k mimetype | while read file page mime; do
            suff=${MIMETYPES[$mime]}
            target="$out_dir"/$page${suff:-.png}
            ((symlink)) && ln -fs "$PWD/$file" "$target" || cp -fu $file "$target"
            info "copied $suff image for page '$page'"
        done
    fi
)
