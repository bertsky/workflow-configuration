#!/usr/bin/env bash

# This script encapsulates calls to `make` in the CWD
# after copying/symlinking the workflow-configuration
# makefiles into it. It is meant to be used either:
# - by calling the script via its full path in the
#   workflow-configuration installation directory, or
# - by using PATH after running `make install` in the
#   workflow-configuration installation directory
#   (with a suitable choice of VIRTUAL_ENV as prefix).
# The first will find the makefiles via its `dirname $0`,
# while the second will find them from the fixed SHAREDIR
# substituted during `make install`.

SHAREDIR=$(cd $(dirname "$0") && pwd)

function process {
    (
        CURDIR="$PWD"
        cd "$SHAREDIR"
        # we want to have a fall-back for FS without symlink support
        # or when some makefile already exists (perhaps with customization)
        # but unfortunately, `cp -u` has strange semantics w.r.t. retvalue
        for f in *.mk Makefile;do
            local src="$SHAREDIR/$f"
            local dst="$CURDIR/$f"
            if [[ ! -e "$dst" || "$src" -nt "$dst" ]];then
                # for broken symlinks cp -f is not enough:
                ln -s "$src" "$dst" 2>/dev/null || cp --remove-destination -f "$src" "$dst"
            fi
        done
        make -C "$CURDIR" "$@"
    )
}

case ${1:--h} in
    -c|-[-]cleanup|cleanup)
        process --no-print-directory cleanup
        exit
        ;;
    -h|-[-]help|help)
        cat <<EOF
  (This will merely delegate to \`make\` on the current working directory "$PWD"
  from the installation directory "$SHAREDIR":)

EOF
        process --no-print-directory help | sed "s/^  make /  $(basename $0) /"
        exit
        ;;
esac

#set -e
process "$@"
