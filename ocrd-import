#!/usr/bin/env bash

function cleanup {
    set +e
    exec 4>&-
    exec 5>&-
    exec 6>&-
    exec 7>&-
    exec 8>&-
    test -v FIFO && rm -f $FIFO 2>/dev/null
    test -v LOG_critical && rm -f $LOG_critical 2>/dev/null
    test -v LOG_error && rm -f $LOG_error 2>/dev/null
    test -v LOG_warning && rm -f $LOG_warning 2>/dev/null
    test -v LOG_info && rm -f $LOG_info 2>/dev/null
    test -v LOG_debug && rm -f $LOG_debug 2>/dev/null
}
trap cleanup EXIT

function logger {
    eval export LOG_$1=$(mktemp -u)
    eval mkfifo \$LOG_$1
    eval ocrd log -n ocrd-import $1 - \<\$LOG_$1 \&
    eval export PID_LOG_$1=$!
    eval exec $2\>\$LOG_$1
}

logger critical 4
logger error 5
logger warning 6
logger info 7
logger debug 8

function critical { echo "$1" >& 4; }
function error { echo "$1" >& 5; }
function warning { echo "$1" >& 6; }
function info { echo "$1" >& 7; }
function debug { echo "$1" >& 8; }

((BASH_VERSINFO<4 || BASH_VERSINFO==4 && BASH_VERSINFO[1]<4)) && critical "bash $BASH_VERSION is too old. Please install 4.4 or newer" && exit 2

ignore=0
skip=()
regex=()
convert=1
dpi=300
numpageid=1
onlybasename=0
while (($#)); do
    case "${1:--h}" in
        -h|-[-]help)
            cat <<EOF
Usage: $(basename $0) [OPTIONS] [DIRECTORY]

with options:
 -i|--ignore      keep going after unknown file types
 -s|--skip SUFFIX ignore file names ending in given SUFFIX (repeatable)
 -R|--regex EXPR  only include paths matching given EXPR (repeatable)
 -C|--no-convert  do not attempt to convert image file types
 -r|--render DPI  when converting PDFs, render at DPI pixel density
 -P|--nonnum-ids  do not use numeric pageIds but basename patterns
 -B|--basename    only use basename for IDs

Create OCR-D workspace meta-data (mets.xml) in DIRECTORY (or $PWD), importing...
* all image files (with known file extension or convertible via ImageMagick) under fileGrp OCR-D-IMG
* all .xml files (if they validate as PAGE-XML) under fileGrp OCR-D-SEG-PAGE
...but failing otherwise.
EOF
            exit
            ;;
        -i|--ignore)
            ignore=1
            shift
            ;;
        # keep just for backwards compatibility:
        -j|--jobs)
            shift
            shift
            ;;
        -s|--skip)
            shift
            skip+=("$1")
            shift
            ;;
        -R|--regex)
            shift
            regex+=("$1")
            shift
            ;;
        -C|--no-convert)
            convert=0
            shift
            ;;
        -r|--render)
            shift
            dpi="$1"
            [[ "$dpi" =~ [0-9]+ ]] || {
                critical "--render needs a numeric value"
                exit 2
            }
            shift
            ;;
        -P|--nonnum-ids)
            numpageid=0
            shift
            ;;
        -B|--basename)
            onlybasename=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

(($#>1)) && warning "non-first argument(s) will be ignored: '${@:2}'"

function add_file {
    info "adding -g $3 -G $1 -m $2 -i $4 '$5'"
    # will be picked up by bulk-add below
    echo $1 $2 $3 $4 $5 >&3
}

set -eE
declare -A MIMETYPES
eval MIMETYPES=( $(ocrd bashlib constants EXT_TO_MIME) )
MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)
DIRECTORY="${1:-.}"
if ! test -d "$DIRECTORY"; then
    critical "not a directory: '$DIRECTORY'"
    false
fi

# avoid damaging/replacing existing workspaces:
if test -f "$DIRECTORY"/mets.xml || test -d "$DIRECTORY"/data -a -f "$DIRECTORY"/data/mets.xml; then
    critical "Directory '$1' already is a workspace"
    false
fi

FIFO=$(mktemp -u)
mkfifo $FIFO

# trap to back-off from mets.xml and subdir in case of failure:
function backout {
    set +e
    critical "Cancelled '$DIRECTORY'"
    exec 3>&-
    test -v PID_BULKADD && kill $PID_BULKADD
    rm -f mets.xml
    rmdir --ignore-fail-on-non-empty OCR-D-IMG OCR-D-SEG-PAGE 2>/dev/null
    popd > /dev/null
    exit 1
}
trap backout ERR INT

pushd "$DIRECTORY" > /dev/null
ocrd workspace init
ocrd workspace bulk-add -r '(?P<grp>[^ ]+) (?P<mime>[^ ]+) (?P<page>[^ ]+) (?P<file>[^ ]+) (?P<src>.*)' \
     -G '{{ grp }}' -m '{{ mime }}' -g '{{ page }}' -i '{{ file }}' -S '{{ src }}' - <$FIFO &

PID_BULKADD=$!
PID_TOP=$$
exec 3>$FIFO

num=0 zeros=0000
IFS=$'\n'
for file in $(find -L . -type f -not -name mets.xml -not -name "*.log" | sort); do
    IFS=$' \t\n'
    let num++ || true
    page=p${zeros:0:$((4-${#num}))}$num
    group=OCR-D-IMG
    file="${file#./}"
    for suffix in "${skip[@]}"; do
        if test "$file" != "${file%$suffix}"; then
            info "skipping file '$file'"
            exit 0 # continue
        fi
    done
    if ((${#regex[*]})); then
        match=0
        for expr in "${regex[@]}"; do
            if [[ "$file" =~ $expr ]]; then
                match=1
                break
            fi
        done
        if ((match)); then
            info "matching file '$file'"
        else
            exit 0 # continue
        fi
    fi
    if test -z "$file"; then
        warning "ignoring empty file $file"
        exit 0 # continue
    fi
    # guess MIME type
    name="$(basename "$file")"
    suffix=."${name##*.}"
    mimetype=${MIMETYPES[${suffix,,[A-Z]}]}
    # create ID from path
    base="${name%$suffix}"
    name="$(dirname "${file#./}")"
    if test "$name" != . && ! ((onlybasename)); then
        base="${name//\//_}_$base"
    fi
    # XSD ID must start with letter and not contain colons or spaces
    # also, avoid . in IDs, because downstream it will confuse filename suffix detection
    base="${base//[ :.,]/_}"
    if ! [[ ${base:0:1} =~ [a-zA-Z] ]]; then
        base=f${base}
    fi
    if ! ((numpageid)); then
        page=$base
    fi
    #debug "found file '$file' (base=$base page=$page mimetype=$mimetype)"
    case "$mimetype" in
        ${MIMETYPE_PAGE})
        # FIXME should really validate this is PAGE-XML (cf. core#353)
        if fgrep -q http://schema.primaresearch.org/PAGE/gts/pagecontent/ "$file" \
                && fgrep -qw 'PcGts' "$file"; then
            group=OCR-D-SEG-PAGE
        elif fgrep -q http://www.loc.gov/standards/alto/ "$file" \
                && fgrep -qw alto "$file"; then
            mimetype=application/alto+xml
            group=OCR-D-SEG-ALTO
        elif (($ignore)); then
            warning "unknown type of file '$file'"
            exit 0 #continue
        else
            critical "unknown type of file '$file'"
            false
        fi
        ;;
        application/pdf|application/postscript|application/oxps|image/x-*|"")
        case "$suffix" in
            .pdf|.PDF)
                inopts=(-units PixelsPerInch -density $((2*$dpi)))
                outopts=(-background white -alpha remove -alpha off -colorspace Gray -units PixelsPerInch -resample $dpi -density $dpi)
                ;;
            *)
                inopts=()
                outopts=()
        esac
        if (($convert)) && \
               mkdir -p OCR-D-IMG && \
               warning "converting '$file' to 'OCR-D-IMG/${base}_*.tif' prior to import" && \
               convert "${inopts[@]}" "$file" "${outopts[@]}" OCR-D-IMG/"${base}_%04d.tif"; then
            mimetype=image/tiff
            IFS=$'\n'
            files=($(find OCR-D-IMG -name "${base}_[0-9]*.tif" | sort))
            IFS=$' \t\n'
            info "converted '$file' to 'OCR-D-IMG/${base}_*.tif' (${#files[*]} files)"
            if ((${#files[*]}>1)); then
                for file in "${files[@]}"; do
                    file="${file#OCR-D-IMG/}"
                    base="${file%.tif}"
                    add_file $group $mimetype ${page}_${base:(-4)} "$base" "$file"
                done
                # there's no danger of clashes with other files here
                exit 0 # continue
            else
                file="${files[0]}"
                file="${file#./}"
            fi
        elif (($ignore)); then
            warning "unknown type of file '$file'"
            exit 0 # continue
        else
            critical "unknown type of file '$file'"
            false
        fi
        ;;
    esac
    # file IDs must contain fileGrp, otherwise processors will have to prevent
    # ID clashes by using numeric IDs
    if [[ "$base" != $group* ]]; then
        base=${group}_"$base"
    fi
    # finally, add the file to the METS
    add_file $group $mimetype $page "$base" "$file"
done

# undo backout trap
trap "" ERR
# finish bulk-add
exec 3>&-
wait $PID_BULKADD
# ensure these exist in the file system, too
# (useful for ocrd-make)
mkdir -p OCR-D-IMG OCR-D-SEG-PAGE
popd > /dev/null

info "Success on '$DIRECTORY'"

